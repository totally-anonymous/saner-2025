# -*- yaml -*-
# https://github.com/sailuh/kaiaulu
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Project Configuration File #
#
# To perform analysis on open source projects, you need to manually
# collect some information from the project's website. As there is
# no standardized website format, this file serves to distill
# important data source information so it can be reused by others
# and understood by Kaiaulu.
#
# Please check https://github.com/sailuh/kaiaulu/tree/master/conf to
# see if a project configuration file already exists. Otherwise, we
# would appreciate if you share your curated file with us by sending a
# Pull Request: https://github.com/sailuh/kaiaulu/pulls
#
# Note, you do NOT need to specify this entire file to conduct analysis.
# Each R Notebook uses a different portion of this file. To know what
# information is used, see the project configuration file section at
# the start of each R Notebook.
#
# Please comment unused parameters instead of deleting them for clarity.
# If you have questions, please open a discussion:
# https://github.com/sailuh/kaiaulu/discussions

project:
  website: https://www.openssl.org/
  openhub: https://openhub.net/p/openssl

version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`
  log: /home/saner/data/git-repos/openssl/.git
  # From where the git log was downloaded?
  log_url: https://github.com/openssl/openssl
  # List of branches used for analysis
  branch:
    - master

# mailing_list:
  # Where is the mbox located locally?
  #mbox: ../../rawdata/mbox/geronimo-dev.mbox
  # What is the domain of the chosen mailing list archive?
  #domain: http://mail-archives.apache.org/mod_mbox
  # Which lists of the domain will be used?
  #list_key:
  #  - apr-dev

#issue_tracker:
#  jira:
    # Obtained from the project's JIRA URL
#    domain: https://issues.apache.org/jira
#    project_key: CAMEL
    # Download using `download_jira_data.Rmd`
#    issues: ../../rawdata/issue_tracker/camel_issues.json
#    issue_comments: ../../rawdata/issue_tracker/camel_issue_comments.json
#  github:
    # Obtained from the project's GitHub URL
#    owner: apache
#    repo: apr
    # Download using `download_github_comments.Rmd`
#    replies: ../../rawdata/github/apr/

#vulnerabilities:
  # Folder path with nvd cve feeds (e.g. nvdcve-1.1-2018.json)
  # Download at: https://nvd.nist.gov/vuln/data-feeds
  #nvd_feed: rawdata/nvdfeed

# Commit message CVE or Issue Regular Expression (regex)
# See project's commit message for examples to create the regex
# commit_message_id_regex:
#   issue_id: CAMEL-[0-9]+
#   #cve_id: ?

filter:
  keep_filepaths_ending_with:
    - ada
    - asmx
    - bb
    - c
    - cc
    - cpp
    - coffee
    - cxx
    - cs
    - d
    - dart
    - ddl
    - erl
    - es6
    - exs
    - ex
    - f
    - for
    - f90
    - go
    - groovy
    - gsh
    - gv
    - gvy
    - gy
    - idl
    - inc
    - j
    - jav
    - java
    - js
    - jsm
    - kt
    - ktm
    - kts
    - lisp
    - lua
    - lsp
    - m
    - mm
    - odl
    - php
    - php4
    - php5
    - phtml
    - pl
    - pm
    - ps1
    - py
    - q
    - r
    - rb
    - ru
    - rs
    - rscript
    - sc
    - scala
    - sh
    - sql
    - swift
    - tcl
    - ts
    - vue
  # remove_filepaths_containing:
  #   - test
  #   - java_code_examples
  # remove_filepaths_on_commit_size_greather_than:
  #   - 30

# Third Party Tools Configuration #
#
# See Kaiaulu's README.md for details on how to setup these tools.
tool:
  # # Depends allow to parse file-file static dependencies.
  # depends:
  #   # accepts one language at a time: cpp, java, ruby, python, pom
  #   # You can obtain this information on OpenHub or the project GiHub page right pane.
  #   code_language: java
  #   # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
  #   keep_dependencies_type:
  #     - Cast
  #     - Call
  #     - Import
  #     - Return
  #     - Set
  #     - Use
  #     - Implement
  #     - ImplLink
  #     - Extend
  #     - Create
  #     - Throw
  #     - Parameter
  #     - Contain
  # dv8:
  #   # The project folder path to store various intermediate
  #   # files for DV8 Analysis
  #   # The folder name will be used in the file names.
  #   folder_path: ../../analysis/dv8/camel_1_0_0
  #   # the architectural flaws thresholds that should be used
  #   architectural_flaws:
  #     cliqueDepends:
  #       - call
  #       - use
  #     crossingCochange: 2
  #     crossingFanIn: 4
  #     crossingFanOut: 4
  #     mvCochange: 2
  #     uiCochange: 2
  #     uihDepends:
  #       - call
  #       - use
  #     uihInheritance:
  #       - extend
  #       - implement
  #       - public
  #       - private
  #       - virtual
  #     uiHistoryImpact: 10
  #     uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
      ada:
        - f # formal
        - s
        - c # component
        - n # constant
        - p # package
        - g
        - d
        - t # type
        - u # subtype
        - r # subprogram
        - p # package
        - y # anon
      asp:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      c:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      cc:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      coffee:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      cpp:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      cs:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      cxx:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      d:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      dart:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      ddl:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      erl:
        - f # function
        - s # source
        - c # vector
        - n # nameattr
        - p
        - g # globalVar
        - d # dataframe
        - t # type
        - u
        - m # module
      es6:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      exs:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      ex:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      f:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      for:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      f90:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      go:
        - f # function
        - s # struct
        - c # const
        - n # methodSpec
        - p # package
        - g
        - d
        - t # type
        - u
        - i # interface
        - m # member
        - r
      groovy:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      gsh:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      gv:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      gvy:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      gy:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      idl:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      inc:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      j:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      jav:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      java:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      js:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      jsm:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      kt:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      ktm:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      kts:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      lisp:
        - f # function
        - s # subroutine
        - c # const
        - n
        - p # package
        - g
        - d # subroutineDeclaration
        - t # token
        - u # rule
        - M # module
      lua:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      lsp:
        - f # function
        - s # subroutine
        - c # const
        - n
        - p # package
        - g
        - d # subroutineDeclaration
        - t # token
        - u # rule
        - M # module
      m:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      mm:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      odl:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      php:
        - f # function
        - s
        - c # class
        - n # namespace
        - p
        - g
        - d # define
        - t # trait
        - u
        - i # interface
        - j
      phtml:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      pl:
        - f # function
        - s # subroutine
        - c # const
        - n
        - p # package
        - g
        - d # subroutineDeclaration
        - t # token
        - u # rule
        - M # module
      pm:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      ps1:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      py:
        - f # function
        - s
        - c # class
        - n
        - p
        - g
        - d
        - t
        - u
        - m # member
      q:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      r:
        - f # function
        - s # source
        - c # vector
        - n # nameattr
        - p
        - g # globalVar
        - d # dataframe
        - t # type
        - u
        - m # module
      rb:
        - f # method
        - s # singeltonMethod
        - c # class
        - n
        - p
        - g
        - d
        - t
        - u
        - m # module
      rs:
        - f # function
        - s # struct
        - c
        - n # module
        - p
        - g # enum
        - d
        - t # typedef
        - u
        - i # interface
        - P # method
      rscript:
        - f # function
        - s # source
        - c # vector
        - n # nameattr
        - p
        - g # globalVar
        - d # dataframe
        - t # type
        - u
        - m # module
      ru:
        - f # function
        - s # struct
        - c
        - n # module
        - p
        - g # enum
        - d
        - t # typedef
        - u
        - i # interface
        - P # method
      sc:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      scala:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      sh:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      sql:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      swift:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      tcl:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u
      ts:
        - f # field/function
        - s
        - c # class
        - n # namespace
        - p # package/property
        - g # enum
        - d
        - t
        - u
        - m # method
        - i # interface
      vue:
        - f
        - s
        - c
        - n
        - p
        - g
        - d
        - t
        - u

# Analysis Configuration #
analysis:
  # # A list of topic and keywords (see src_text_showcase.Rmd).
  # topics:
  #   topic_1:
  #     - Parser
  #     - Lexer
  #   topic_2:
  #     - Python
  #     - Ruby
  # You can specify the intervals in 2 ways: window, or enumeration
  window:
    # # If using gitlog, use start_commit and end_commit. Timestamp is inferred from gitlog
    # start_commit: 9eae9e96f15e1f216162810cef4271a439a74223
    # end_commit: f8f9ec1f249dd552065aa37c983bed4d4d869bb0
    # # Use datetime only if no gitlog is used in the analysis.
    # start_datetime: 2013-05-01 00:00:00
    # end_datetime: 2013-11-01 00:00:00
    # You can provide a set of dates to create time windows between these
    # dates for evolutionary analyses.
    ranges:
      - 1998-12-21 10:52:45
      - 1999-03-03 02:01:26
      - 1999-05-31 22:10:15
      - 1999-08-28 13:18:25
      - 1999-11-27 19:43:10
      - 2000-02-26 04:48:22
      - 2000-05-25 13:20:11
      - 2000-08-22 22:20:25
      - 2000-11-22 04:54:06
      - 2001-02-20 00:43:59
      - 2001-05-17 13:03:20
      - 2001-08-18 16:04:36
      - 2001-11-16 13:12:19
      - 2002-02-14 16:08:55
      - 2002-05-15 18:49:25
      - 2002-08-14 00:48:02
      - 2002-11-11 21:34:21
      - 2003-02-08 19:51:37
      - 2003-05-07 23:20:58
      - 2003-08-07 11:57:42
      - 2003-11-07 01:33:00
      - 2004-02-01 13:39:51
      - 2004-05-04 20:08:55
      - 2004-08-02 22:41:19
      - 2004-10-25 17:11:19
      - 2005-01-27 11:42:28
      - 2005-04-29 21:20:31
      - 2005-07-27 20:20:53
      - 2005-10-26 19:40:45
      - 2006-01-19 17:16:56
      - 2006-04-24 00:07:26
      - 2006-07-21 22:46:19
      - 2006-10-21 16:28:03
      - 2007-01-18 21:24:44
      - 2007-04-19 15:14:21
      - 2007-07-18 17:40:49
      - 2007-10-14 14:09:13
      - 2008-01-14 18:10:55
      - 2008-04-12 08:41:05
      - 2008-07-10 20:08:47
      - 2008-10-10 10:41:35
      - 2009-01-07 23:44:27
      - 2009-04-08 16:16:35
      - 2009-07-04 12:04:06
      - 2009-10-04 16:52:51
      - 2010-01-01 14:39:37
      - 2010-03-31 11:50:30
      - 2010-07-02 08:14:12
      - 2010-09-27 21:19:43
      - 2010-12-25 20:45:59
      - 2011-03-25 16:41:11
      - 2011-06-27 11:38:48
      - 2011-09-25 22:12:39
      - 2011-12-23 15:03:03
      - 2012-03-22 16:28:07
      - 2012-06-19 13:39:30
      - 2012-09-19 20:58:07
      - 2012-12-18 18:19:54
      - 2013-03-18 18:29:41
      - 2013-06-13 16:26:07
      - 2013-09-14 02:48:09
      - 2013-12-13 15:42:16
      - 2014-03-12 14:42:08
      - 2014-06-11 18:40:51
      - 2014-09-09 21:48:27
      - 2014-12-08 21:41:42
      - 2015-03-08 16:27:55
      - 2015-06-07 02:24:01
      - 2015-09-05 03:00:58
      - 2015-12-03 13:12:01
      - 2016-03-02 21:32:40
      - 2016-05-31 22:03:54
      - 2016-08-30 03:13:11
      - 2016-11-25 20:50:58
      - 2017-02-26 00:00:26
      - 2017-05-26 18:08:13
      - 2017-08-25 06:05:13
      - 2017-11-22 07:23:48
      - 2018-02-20 12:59:52
      - 2018-05-21 19:57:18
      - 2018-08-20 01:12:26
      - 2018-11-16 08:23:50
      - 2019-02-15 23:29:42
      - 2019-05-17 01:05:16
      - 2019-08-12 11:37:55
      - 2019-11-12 17:14:31
      - 2020-02-10 15:49:37
      - 2020-05-10 16:51:08
      - 2020-08-08 21:50:41
      - 2020-11-06 17:20:54
      - 2021-02-05 05:53:49
      - 2021-05-06 01:01:30
      - 2021-08-04 05:02:27
      - 2021-11-01 08:40:27
      - 2022-01-31 00:39:00
      - 2022-04-29 12:13:02
      - 2022-07-29 12:32:16
      - 2022-10-27 16:39:29
      - 2023-01-25 14:27:14
      - 2023-04-25 22:01:46
      - 2023-07-25 02:08:14
      - 2023-10-20 15:46:57
      - 2024-01-19 13:06:20
#     # Instead of manually providing dates, you can also generate
#     # time windows automatically by specifying a desired window size in
#     # days. Note that explicit ranges will be preferred and used by default
#     # if provided.
#     size_days: 90
# enumeration:
#     # If using gitlog, specify the commits
#     commit:
#       - 9eae9e96f15e1f216162810cef4271a439a74223
#       - f1d2d568776b3708dd6a3077376e2331f9268b04
#       - c33a2ce74c84f0d435bfa2dd8953d132ebf7a77a
#     # Use datetime only if no gitlog is used in the analysis. Timestamp is inferred from gitlog
#     datetime:
#       - 2013-05-01 00:00:00
#       - 2013-08-01 00:00:00
#       - 2013-11-01 00:00:00
