# -*- yaml -*-
# https://github.com/sailuh/kaiaulu
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Project Configuration File #
#
# To perform analysis on open source projects, you need to manually
# collect some information from the project's website. As there is
# no standardized website format, this file serves to distill
# important data source information so it can be reused by others
# and understood by Kaiaulu.
#
# Please check https://github.com/sailuh/kaiaulu/tree/master/conf to
# see if a project configuration file already exists. Otherwise, we
# would appreciate if you share your curated file with us by sending a
# Pull Request: https://github.com/sailuh/kaiaulu/pulls
#
# Note, you do NOT need to specify this entire file to conduct analysis.
# Each R Notebook uses a different portion of this file. To know what
# information is used, see the project configuration file section at
# the start of each R Notebook.
#
# Please comment unused parameters instead of deleting them for clarity.
# If you have questions, please open a discussion:
# https://github.com/sailuh/kaiaulu/discussions

project:
  website: https://www.winehq.org/
  openhub: https://openhub.net/p/wine

version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`
  log: /home/saner/data/git-repos/wine/.git
  # From where the git log was downloaded?
  log_url: git://source.winehq.org/git/wine.git
  # List of branches used for analysis
  branch:
    - master

# mailing_list:
  # Where is the mbox located locally?
  #mbox: ../../rawdata/mbox/geronimo-dev.mbox
  # What is the domain of the chosen mailing list archive?
  #domain: http://mail-archives.apache.org/mod_mbox
  # Which lists of the domain will be used?
  #list_key:
  #  - apr-dev

#issue_tracker:
#  jira:
    # Obtained from the project's JIRA URL
#    domain: https://issues.apache.org/jira
#    project_key: CAMEL
    # Download using `download_jira_data.Rmd`
#    issues: ../../rawdata/issue_tracker/camel_issues.json
#    issue_comments: ../../rawdata/issue_tracker/camel_issue_comments.json
#  github:
    # Obtained from the project's GitHub URL
#    owner: apache
#    repo: apr
    # Download using `download_github_comments.Rmd`
#    replies: ../../rawdata/github/apr/

#vulnerabilities:
  # Folder path with nvd cve feeds (e.g. nvdcve-1.1-2018.json)
  # Download at: https://nvd.nist.gov/vuln/data-feeds
  #nvd_feed: rawdata/nvdfeed

# Commit message CVE or Issue Regular Expression (regex)
# See project's commit message for examples to create the regex
# commit_message_id_regex:
#   issue_id: CAMEL-[0-9]+
#   #cve_id: ?

filter:
  keep_filepaths_ending_with:
    - cpp
    - c
    - h
    - java
    - js
    - py
    - cc
  remove_filepaths_containing:
    - test

# Third Party Tools Configuration #
#
# See Kaiaulu's README.md for details on how to setup these tools.
tool:
  # # Depends allow to parse file-file static dependencies.
  # depends:
  #   # accepts one language at a time: cpp, java, ruby, python, pom
  #   # You can obtain this information on OpenHub or the project GiHub page right pane.
  #   code_language: java
  #   # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
  #   keep_dependencies_type:
  #     - Cast
  #     - Call
  #     - Import
  #     - Return
  #     - Set
  #     - Use
  #     - Implement
  #     - ImplLink
  #     - Extend
  #     - Create
  #     - Throw
  #     - Parameter
  #     - Contain
  # dv8:
  #   # The project folder path to store various intermediate
  #   # files for DV8 Analysis
  #   # The folder name will be used in the file names.
  #   folder_path: ../../analysis/dv8/camel_1_0_0
  #   # the architectural flaws thresholds that should be used
  #   architectural_flaws:
  #     cliqueDepends:
  #       - call
  #       - use
  #     crossingCochange: 2
  #     crossingFanIn: 4
  #     crossingFanOut: 4
  #     mvCochange: 2
  #     uiCochange: 2
  #     uihDepends:
  #       - call
  #       - use
  #     uihInheritance:
  #       - extend
  #       - implement
  #       - public
  #       - private
  #       - virtual
  #     uiHistoryImpact: 10
  #     uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
      c:
        - f # function definition
      cpp:
        - c # classes
        - f # function definition
      java:
        - c # classes
        - m # methods
      python:
        - c # classes
        - f # functions
      r:
        - f # functions

# Analysis Configuration #
analysis:
  # # A list of topic and keywords (see src_text_showcase.Rmd).
  # topics:
  #   topic_1:
  #     - Parser
  #     - Lexer
  #   topic_2:
  #     - Python
  #     - Ruby
  # You can specify the intervals in 2 ways: window, or enumeration
  window:
    # # If using gitlog, use start_commit and end_commit. Timestamp is inferred from gitlog
    # start_commit: 9eae9e96f15e1f216162810cef4271a439a74223
    # end_commit: f8f9ec1f249dd552065aa37c983bed4d4d869bb0
    # # Use datetime only if no gitlog is used in the analysis.
    # start_datetime: 2013-05-01 00:00:00
    # end_datetime: 2013-11-01 00:00:00
    # You can provide a set of dates to create time windows between these
    # dates for evolutionary analyses.
    ranges:
      - 1993-06-29 16:33:12
      - 1993-09-14 16:47:10
      - 1993-11-24 17:08:56
      - 1994-03-01 19:48:04
      - 1994-06-15 15:45:11
      - 1994-08-16 15:43:11
      - 1994-12-10 13:02:28
      - 1995-03-02 17:33:47
      - 1995-06-06 16:40:35
      - 1995-09-01 15:57:28
      - 1995-11-26 13:59:11
      - 1996-03-02 19:34:10
      - 1996-05-28 18:54:58
      - 1996-09-02 16:46:30
      - 1996-12-01 17:17:47
      - 1997-02-15 14:29:56
      - 1997-05-25 13:58:18
      - 1997-08-24 16:00:30
      - 1997-11-16 17:38:29
      - 1998-02-15 19:40:49
      - 1998-05-17 17:13:43
      - 1998-08-22 19:03:56
      - 1998-11-15 18:12:12
      - 1999-02-19 16:50:24
      - 1999-05-20 16:40:23
      - 1999-08-18 18:40:52
      - 1999-11-15 01:40:17
      - 2000-02-14 19:56:21
      - 2000-05-15 02:47:25
      - 2000-08-11 21:16:53
      - 2000-11-11 00:38:37
      - 2001-01-29 02:03:31
      - 2001-05-10 03:23:59
      - 2001-08-07 19:32:14
      - 2001-11-06 00:52:12
      - 2002-02-02 18:42:11
      - 2002-05-04 18:41:27
      - 2002-08-03 00:25:59
      - 2002-11-01 02:30:46
      - 2003-01-30 01:18:06
      - 2003-04-30 00:53:23
      - 2003-07-28 19:19:48
      - 2003-10-24 04:45:35
      - 2004-01-23 22:51:41
      - 2004-04-23 23:31:58
      - 2004-07-22 23:45:58
      - 2004-10-20 02:15:06
      - 2005-01-18 11:45:17
      - 2005-04-19 09:49:38
      - 2005-07-18 09:20:07
      - 2005-10-13 14:32:22
      - 2006-01-13 13:29:30
      - 2006-04-14 08:53:11
      - 2006-07-12 19:13:16
      - 2006-10-11 10:22:01
      - 2007-01-08 21:01:56
      - 2007-04-09 10:23:17
      - 2007-07-06 17:32:47
      - 2007-10-05 08:33:56
      - 2008-01-03 12:30:41
      - 2008-04-03 10:02:24
      - 2008-07-02 10:23:25
      - 2008-09-29 22:32:45
      - 2008-12-27 19:35:19
      - 2009-03-27 18:31:22
      - 2009-06-26 14:12:36
      - 2009-09-24 21:59:54
      - 2009-12-23 20:13:58
      - 2010-03-23 16:30:48
      - 2010-06-22 09:47:40
      - 2010-09-19 12:59:36
      - 2010-12-18 11:33:29
      - 2011-03-18 20:13:47
      - 2011-06-17 09:54:43
      - 2011-09-14 15:28:50
      - 2011-12-13 18:31:48
      - 2012-03-13 10:08:43
      - 2012-06-11 10:19:07
      - 2012-09-07 17:15:29
      - 2012-12-07 19:17:32
      - 2013-03-08 10:02:25
      - 2013-06-06 09:47:26
      - 2013-09-04 09:50:15
      - 2013-12-02 22:28:58
      - 2014-02-27 20:33:31
      - 2014-05-26 12:15:37
      - 2014-08-29 18:38:42
      - 2014-11-27 22:22:16
      - 2015-02-26 04:29:04
      - 2015-05-27 08:42:59
      - 2015-08-25 08:48:27
      - 2015-11-23 04:25:31
      - 2016-02-20 03:09:22
      - 2016-05-21 00:55:18
      - 2016-08-19 08:31:56
      - 2016-11-16 22:55:21
      - 2017-02-14 22:07:10
      - 2017-05-16 10:09:20
      - 2017-08-12 10:35:26
      - 2017-11-11 09:27:31
      - 2018-02-09 18:45:45
      - 2018-05-11 09:08:10
      - 2018-07-20 17:12:26
      - 2018-11-06 21:05:41
      - 2019-02-05 10:03:27
      - 2019-05-06 08:40:25
      - 2019-08-02 19:24:39
      - 2019-11-02 08:22:57
      - 2020-01-31 09:47:54
      - 2020-04-29 19:10:18
      - 2020-07-29 09:24:26
      - 2020-10-27 09:27:32
      - 2021-01-25 08:59:12
      - 2021-04-23 20:18:43
      - 2021-07-23 17:03:30
      - 2021-10-22 09:25:55
      - 2022-01-20 10:18:11
      - 2022-04-19 19:41:49
      - 2022-07-19 09:06:17
      - 2022-10-17 09:40:12
      - 2023-01-13 21:22:36
      - 2023-04-14 19:45:19
      - 2023-07-14 07:26:44
      - 2023-10-12 09:02:17
      - 2024-01-10 09:35:00
#     # Instead of manually providing dates, you can also generate
#     # time windows automatically by specifying a desired window size in
#     # days. Note that explicit ranges will be preferred and used by default
#     # if provided.
#     size_days: 90
# enumeration:
#     # If using gitlog, specify the commits
#     commit:
#       - 9eae9e96f15e1f216162810cef4271a439a74223
#       - f1d2d568776b3708dd6a3077376e2331f9268b04
#       - c33a2ce74c84f0d435bfa2dd8953d132ebf7a77a
#     # Use datetime only if no gitlog is used in the analysis. Timestamp is inferred from gitlog
#     datetime:
#       - 2013-05-01 00:00:00
#       - 2013-08-01 00:00:00
#       - 2013-11-01 00:00:00
