# -*- yaml -*-
# https://github.com/sailuh/kaiaulu
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Project Configuration File #
#
# To perform analysis on open source projects, you need to manually
# collect some information from the project's website. As there is
# no standardized website format, this file serves to distill
# important data source information so it can be reused by others
# and understood by Kaiaulu.
#
# Please check https://github.com/sailuh/kaiaulu/tree/master/conf to
# see if a project configuration file already exists. Otherwise, we
# would appreciate if you share your curated file with us by sending a
# Pull Request: https://github.com/sailuh/kaiaulu/pulls
#
# Note, you do NOT need to specify this entire file to conduct analysis.
# Each R Notebook uses a different portion of this file. To know what
# information is used, see the project configuration file section at
# the start of each R Notebook.
#
# Please comment unused parameters instead of deleting them for clarity.
# If you have questions, please open a discussion:
# https://github.com/sailuh/kaiaulu/discussions

project:
  website: https://wordpress.org/
  openhub: https://openhub.net/p/wordpress

version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`
  log: /home/saner/data/git-repos/wordpress/.git
  # From where the git log was downloaded?
  log_url: https://github.com/WordPress/WordPress
  # List of branches used for analysis
  branch:
    - master

# mailing_list:
  # Where is the mbox located locally?
  #mbox: ../../rawdata/mbox/geronimo-dev.mbox
  # What is the domain of the chosen mailing list archive?
  #domain: http://mail-archives.apache.org/mod_mbox
  # Which lists of the domain will be used?
  #list_key:
  #  - apr-dev

#issue_tracker:
#  jira:
    # Obtained from the project's JIRA URL
#    domain: https://issues.apache.org/jira
#    project_key: CAMEL
    # Download using `download_jira_data.Rmd`
#    issues: ../../rawdata/issue_tracker/camel_issues.json
#    issue_comments: ../../rawdata/issue_tracker/camel_issue_comments.json
#  github:
    # Obtained from the project's GitHub URL
#    owner: apache
#    repo: apr
    # Download using `download_github_comments.Rmd`
#    replies: ../../rawdata/github/apr/

#vulnerabilities:
  # Folder path with nvd cve feeds (e.g. nvdcve-1.1-2018.json)
  # Download at: https://nvd.nist.gov/vuln/data-feeds
  #nvd_feed: rawdata/nvdfeed

# Commit message CVE or Issue Regular Expression (regex)
# See project's commit message for examples to create the regex
# commit_message_id_regex:
#   issue_id: CAMEL-[0-9]+
#   #cve_id: ?

filter:
  keep_filepaths_ending_with:
    - cpp
    - c
    - h
    - java
    - js
    - py
    - cc
  remove_filepaths_containing:
    - test

# Third Party Tools Configuration #
#
# See Kaiaulu's README.md for details on how to setup these tools.
tool:
  # # Depends allow to parse file-file static dependencies.
  # depends:
  #   # accepts one language at a time: cpp, java, ruby, python, pom
  #   # You can obtain this information on OpenHub or the project GiHub page right pane.
  #   code_language: java
  #   # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
  #   keep_dependencies_type:
  #     - Cast
  #     - Call
  #     - Import
  #     - Return
  #     - Set
  #     - Use
  #     - Implement
  #     - ImplLink
  #     - Extend
  #     - Create
  #     - Throw
  #     - Parameter
  #     - Contain
  # dv8:
  #   # The project folder path to store various intermediate
  #   # files for DV8 Analysis
  #   # The folder name will be used in the file names.
  #   folder_path: ../../analysis/dv8/camel_1_0_0
  #   # the architectural flaws thresholds that should be used
  #   architectural_flaws:
  #     cliqueDepends:
  #       - call
  #       - use
  #     crossingCochange: 2
  #     crossingFanIn: 4
  #     crossingFanOut: 4
  #     mvCochange: 2
  #     uiCochange: 2
  #     uihDepends:
  #       - call
  #       - use
  #     uihInheritance:
  #       - extend
  #       - implement
  #       - public
  #       - private
  #       - virtual
  #     uiHistoryImpact: 10
  #     uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
      c:
        - f # function definition
      cpp:
        - c # classes
        - f # function definition
      java:
        - c # classes
        - m # methods
      python:
        - c # classes
        - f # functions
      r:
        - f # functions

# Analysis Configuration #
analysis:
  # # A list of topic and keywords (see src_text_showcase.Rmd).
  # topics:
  #   topic_1:
  #     - Parser
  #     - Lexer
  #   topic_2:
  #     - Python
  #     - Ruby
  # You can specify the intervals in 2 ways: window, or enumeration
  window:
    # # If using gitlog, use start_commit and end_commit. Timestamp is inferred from gitlog
    # start_commit: 9eae9e96f15e1f216162810cef4271a439a74223
    # end_commit: f8f9ec1f249dd552065aa37c983bed4d4d869bb0
    # # Use datetime only if no gitlog is used in the analysis.
    # start_datetime: 2013-05-01 00:00:00
    # end_datetime: 2013-11-01 00:00:00
    # You can provide a set of dates to create time windows between these
    # dates for evolutionary analyses.
    ranges:
      - 2003-04-01 06:17:43
      - 2003-05-14 00:50:59
      - 2003-08-12 23:07:38
      - 2003-11-11 22:15:16
      - 2004-02-09 19:43:21
      - 2004-05-09 23:26:41
      - 2004-08-07 18:12:54
      - 2004-11-05 03:56:40
      - 2005-02-03 19:16:16
      - 2005-05-04 20:57:12
      - 2005-08-03 00:46:57
      - 2005-10-29 23:28:05
      - 2006-01-29 23:06:58
      - 2006-04-29 09:21:23
      - 2006-07-28 23:16:31
      - 2006-10-26 19:55:10
      - 2007-01-25 00:12:08
      - 2007-04-25 00:49:57
      - 2007-07-21 21:52:35
      - 2007-10-21 17:18:24
      - 2008-01-19 00:01:45
      - 2008-04-18 23:38:21
      - 2008-07-17 22:51:26
      - 2008-10-15 22:00:12
      - 2009-01-13 15:18:37
      - 2009-04-13 17:08:13
      - 2009-07-11 09:17:09
      - 2009-10-11 00:37:26
      - 2010-01-09 00:19:09
      - 2010-04-08 16:45:18
      - 2010-07-07 20:35:51
      - 2010-10-05 23:06:20
      - 2011-01-03 23:56:42
      - 2011-04-03 12:32:06
      - 2011-06-30 22:47:23
      - 2011-10-01 00:24:44
      - 2011-12-29 18:45:01
      - 2012-03-28 20:32:29
      - 2012-06-26 21:50:58
      - 2012-09-24 23:49:45
      - 2012-12-23 22:58:43
      - 2013-03-22 22:56:55
      - 2013-06-21 19:51:53
      - 2013-09-19 21:33:09
      - 2013-12-12 05:31:21
      - 2014-03-18 23:31:14
      - 2014-06-16 18:22:14
      - 2014-09-13 22:24:17
      - 2014-12-14 00:11:24
      - 2015-03-14 00:53:27
      - 2015-06-11 09:28:31
      - 2015-09-09 19:45:26
      - 2015-12-08 23:23:26
      - 2016-03-07 22:29:26
      - 2016-06-05 12:22:30
      - 2016-09-03 15:02:36
      - 2016-12-02 23:01:43
      - 2017-03-02 03:14:56
      - 2017-05-31 22:04:43
      - 2017-08-29 16:43:47
      - 2017-11-27 03:52:47
      - 2018-02-25 21:45:30
      - 2018-05-26 12:43:23
      - 2018-08-20 15:09:24
      - 2018-11-15 06:59:00
      - 2019-02-20 23:37:50
      - 2019-05-21 14:49:05
      - 2019-08-19 21:07:50
      - 2019-11-17 16:16:02
      - 2020-02-15 05:08:05
      - 2020-05-15 18:13:09
      - 2020-08-13 12:34:10
      - 2020-11-11 10:41:07
      - 2021-02-09 20:40:04
      - 2021-05-10 18:38:59
      - 2021-08-08 14:10:01
      - 2021-11-06 21:56:59
      - 2022-02-04 16:28:00
      - 2022-05-05 16:29:08
      - 2022-08-03 17:17:10
      - 2022-11-01 20:17:15
      - 2023-01-30 15:24:13
      - 2023-04-30 14:08:23
      - 2023-07-29 00:31:35
      - 2023-10-27 19:25:20
      - 2024-01-26 00:54:15
#     # Instead of manually providing dates, you can also generate
#     # time windows automatically by specifying a desired window size in
#     # days. Note that explicit ranges will be preferred and used by default
#     # if provided.
#     size_days: 90
# enumeration:
#     # If using gitlog, specify the commits
#     commit:
#       - 9eae9e96f15e1f216162810cef4271a439a74223
#       - f1d2d568776b3708dd6a3077376e2331f9268b04
#       - c33a2ce74c84f0d435bfa2dd8953d132ebf7a77a
#     # Use datetime only if no gitlog is used in the analysis. Timestamp is inferred from gitlog
#     datetime:
#       - 2013-05-01 00:00:00
#       - 2013-08-01 00:00:00
#       - 2013-11-01 00:00:00
