# -*- yaml -*-
# https://github.com/sailuh/kaiaulu
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Project Configuration File #
#
# To perform analysis on open source projects, you need to manually
# collect some information from the project's website. As there is
# no standardized website format, this file serves to distill
# important data source information so it can be reused by others
# and understood by Kaiaulu.
#
# Please check https://github.com/sailuh/kaiaulu/tree/master/conf to
# see if a project configuration file already exists. Otherwise, we
# would appreciate if you share your curated file with us by sending a
# Pull Request: https://github.com/sailuh/kaiaulu/pulls
#
# Note, you do NOT need to specify this entire file to conduct analysis.
# Each R Notebook uses a different portion of this file. To know what
# information is used, see the project configuration file section at
# the start of each R Notebook.
#
# Please comment unused parameters instead of deleting them for clarity.
# If you have questions, please open a discussion:
# https://github.com/sailuh/kaiaulu/discussions

project:
  website: https://www.gtk.org/
  openhub: https://openhub.net/p/gtk

version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`
  log: /home/saner/data/git-repos/gtk/.git
  # From where the git log was downloaded?
  log_url: https://gitlab.gnome.org/GNOME/gtk.git
  # List of branches used for analysis
  branch:
    - main

# mailing_list:
  # Where is the mbox located locally?
  #mbox: ../../rawdata/mbox/geronimo-dev.mbox
  # What is the domain of the chosen mailing list archive?
  #domain: http://mail-archives.apache.org/mod_mbox
  # Which lists of the domain will be used?
  #list_key:
  #  - apr-dev

#issue_tracker:
#  jira:
    # Obtained from the project's JIRA URL
#    domain: https://issues.apache.org/jira
#    project_key: CAMEL
    # Download using `download_jira_data.Rmd`
#    issues: ../../rawdata/issue_tracker/camel_issues.json
#    issue_comments: ../../rawdata/issue_tracker/camel_issue_comments.json
#  github:
    # Obtained from the project's GitHub URL
#    owner: apache
#    repo: apr
    # Download using `download_github_comments.Rmd`
#    replies: ../../rawdata/github/apr/

#vulnerabilities:
  # Folder path with nvd cve feeds (e.g. nvdcve-1.1-2018.json)
  # Download at: https://nvd.nist.gov/vuln/data-feeds
  #nvd_feed: rawdata/nvdfeed

# Commit message CVE or Issue Regular Expression (regex)
# See project's commit message for examples to create the regex
# commit_message_id_regex:
#   issue_id: CAMEL-[0-9]+
#   #cve_id: ?

filter:
  keep_filepaths_ending_with:
    - cpp
    - c
    - h
    - java
    - js
    - py
    - cc
  remove_filepaths_containing:
    - test

# Third Party Tools Configuration #
#
# See Kaiaulu's README.md for details on how to setup these tools.
tool:
  # # Depends allow to parse file-file static dependencies.
  # depends:
  #   # accepts one language at a time: cpp, java, ruby, python, pom
  #   # You can obtain this information on OpenHub or the project GiHub page right pane.
  #   code_language: java
  #   # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
  #   keep_dependencies_type:
  #     - Cast
  #     - Call
  #     - Import
  #     - Return
  #     - Set
  #     - Use
  #     - Implement
  #     - ImplLink
  #     - Extend
  #     - Create
  #     - Throw
  #     - Parameter
  #     - Contain
  # dv8:
  #   # The project folder path to store various intermediate
  #   # files for DV8 Analysis
  #   # The folder name will be used in the file names.
  #   folder_path: ../../analysis/dv8/camel_1_0_0
  #   # the architectural flaws thresholds that should be used
  #   architectural_flaws:
  #     cliqueDepends:
  #       - call
  #       - use
  #     crossingCochange: 2
  #     crossingFanIn: 4
  #     crossingFanOut: 4
  #     mvCochange: 2
  #     uiCochange: 2
  #     uihDepends:
  #       - call
  #       - use
  #     uihInheritance:
  #       - extend
  #       - implement
  #       - public
  #       - private
  #       - virtual
  #     uiHistoryImpact: 10
  #     uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
      c:
        - f # function definition
      cpp:
        - c # classes
        - f # function definition
      java:
        - c # classes
        - m # methods
      python:
        - c # classes
        - f # functions
      r:
        - f # functions

# Analysis Configuration #
analysis:
  # # A list of topic and keywords (see src_text_showcase.Rmd).
  # topics:
  #   topic_1:
  #     - Parser
  #     - Lexer
  #   topic_2:
  #     - Python
  #     - Ruby
  # You can specify the intervals in 2 ways: window, or enumeration
  window:
    # # If using gitlog, use start_commit and end_commit. Timestamp is inferred from gitlog
    # start_commit: 9eae9e96f15e1f216162810cef4271a439a74223
    # end_commit: f8f9ec1f249dd552065aa37c983bed4d4d869bb0
    # # Use datetime only if no gitlog is used in the analysis.
    # start_datetime: 2013-05-01 00:00:00
    # end_datetime: 2013-11-01 00:00:00
    # You can provide a set of dates to create time windows between these
    # dates for evolutionary analyses.
    ranges:
      - 1997-11-24 22:37:52
      - 1997-12-03 16:38:54
      - 1998-03-03 01:54:44
      - 1998-06-01 11:53:08
      - 1998-08-29 22:27:47
      - 1998-11-28 15:57:55
      - 1999-02-25 21:39:14
      - 1999-05-26 21:19:29
      - 1999-08-25 15:27:04
      - 1999-11-23 20:03:14
      - 2000-02-20 03:08:00
      - 2000-05-21 06:13:34
      - 2000-08-18 21:32:48
      - 2000-11-16 21:17:53
      - 2001-02-15 03:40:48
      - 2001-05-16 18:51:28
      - 2001-08-13 17:23:41
      - 2001-11-11 12:03:12
      - 2002-02-10 21:06:15
      - 2002-05-10 21:59:20
      - 2002-08-09 12:06:14
      - 2002-11-07 21:05:52
      - 2003-02-05 11:23:42
      - 2003-05-05 22:13:31
      - 2003-08-04 21:13:55
      - 2003-11-02 16:24:31
      - 2004-01-31 17:44:31
      - 2004-04-30 16:34:36
      - 2004-07-29 20:53:52
      - 2004-10-27 19:01:25
      - 2005-01-25 20:54:00
      - 2005-04-25 00:47:31
      - 2005-07-24 16:47:23
      - 2005-10-22 21:08:23
      - 2006-01-20 19:11:08
      - 2006-04-20 15:00:01
      - 2006-07-19 18:55:27
      - 2006-10-15 22:58:08
      - 2007-01-15 12:44:28
      - 2007-04-15 10:03:43
      - 2007-07-14 18:28:03
      - 2007-10-12 04:31:04
      - 2008-01-10 20:58:40
      - 2008-04-08 14:06:17
      - 2008-07-07 23:17:40
      - 2008-10-06 21:15:45
      - 2009-01-04 04:50:36
      - 2009-04-04 11:40:12
      - 2009-07-03 19:22:02
      - 2009-10-01 16:36:43
      - 2009-12-30 13:21:31
      - 2010-03-30 10:23:06
      - 2010-06-28 18:45:25
      - 2010-09-26 19:34:23
      - 2010-12-25 05:29:23
      - 2011-03-25 09:42:08
      - 2011-06-23 19:02:24
      - 2011-09-21 18:14:03
      - 2011-12-20 20:36:48
      - 2012-03-19 17:45:48
      - 2012-06-17 11:46:28
      - 2012-09-15 20:17:03
      - 2012-12-14 17:57:49
      - 2013-03-14 16:48:20
      - 2013-06-12 02:21:46
      - 2013-09-10 21:20:15
      - 2013-12-09 08:55:39
      - 2014-03-09 04:55:17
      - 2014-06-07 02:07:15
      - 2014-09-05 18:57:04
      - 2014-12-04 05:09:44
      - 2015-03-04 20:20:40
      - 2015-06-02 19:14:27
      - 2015-08-31 17:03:40
      - 2015-11-28 20:09:53
      - 2016-02-27 19:22:55
      - 2016-05-27 09:38:20
      - 2016-08-25 21:02:27
      - 2016-11-23 20:43:13
      - 2017-02-21 18:14:10
      - 2017-05-20 01:07:05
      - 2017-08-20 21:00:03
      - 2017-11-18 13:18:11
      - 2018-02-16 20:23:14
      - 2018-05-17 15:42:00
      - 2018-08-15 01:15:14
      - 2018-11-13 19:54:18
      - 2019-02-11 13:51:13
      - 2019-05-12 20:09:03
      - 2019-08-10 17:51:45
      - 2019-11-08 11:44:39
      - 2020-02-06 19:30:31
      - 2020-05-06 21:14:36
      - 2020-08-04 15:59:32
      - 2020-11-02 19:55:14
      - 2021-01-31 16:09:20
      - 2021-05-01 15:17:40
      - 2021-07-30 18:54:58
      - 2021-10-28 17:17:02
      - 2022-01-26 15:02:00
      - 2022-04-26 19:01:08
      - 2022-07-25 21:15:58
      - 2022-10-23 09:21:37
      - 2023-01-21 15:58:51
      - 2023-04-21 15:14:32
      - 2023-07-20 19:18:13
      - 2023-10-17 03:32:37
      - 2024-01-16 19:35:20
#     # Instead of manually providing dates, you can also generate
#     # time windows automatically by specifying a desired window size in
#     # days. Note that explicit ranges will be preferred and used by default
#     # if provided.
#     size_days: 90
# enumeration:
#     # If using gitlog, specify the commits
#     commit:
#       - 9eae9e96f15e1f216162810cef4271a439a74223
#       - f1d2d568776b3708dd6a3077376e2331f9268b04
#       - c33a2ce74c84f0d435bfa2dd8953d132ebf7a77a
#     # Use datetime only if no gitlog is used in the analysis. Timestamp is inferred from gitlog
#     datetime:
#       - 2013-05-01 00:00:00
#       - 2013-08-01 00:00:00
#       - 2013-11-01 00:00:00
