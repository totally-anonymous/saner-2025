# -*- yaml -*-
# https://github.com/sailuh/kaiaulu
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Project Configuration File #
#
# To perform analysis on open source projects, you need to manually
# collect some information from the project's website. As there is
# no standardized website format, this file serves to distill
# important data source information so it can be reused by others
# and understood by Kaiaulu.
#
# Please check https://github.com/sailuh/kaiaulu/tree/master/conf to
# see if a project configuration file already exists. Otherwise, we
# would appreciate if you share your curated file with us by sending a
# Pull Request: https://github.com/sailuh/kaiaulu/pulls
#
# Note, you do NOT need to specify this entire file to conduct analysis.
# Each R Notebook uses a different portion of this file. To know what
# information is used, see the project configuration file section at
# the start of each R Notebook.
#
# Please comment unused parameters instead of deleting them for clarity.
# If you have questions, please open a discussion:
# https://github.com/sailuh/kaiaulu/discussions

project:
  website: https://www.djangoproject.com/
  openhub: https://openhub.net/p/django

version_control:
  # Where is the git log located locally?
  # This is the path to the .git of the project repository you are analyzing.
  # The .git is hidden, so you can see it using `ls -a`
  log: /home/saner/data/git-repos/django/.git
  # From where the git log was downloaded?
  log_url: https://github.com/django/django
  # List of branches used for analysis
  branch:
    - main

# mailing_list:
  # Where is the mbox located locally?
  #mbox: ../../rawdata/mbox/geronimo-dev.mbox
  # What is the domain of the chosen mailing list archive?
  #domain: http://mail-archives.apache.org/mod_mbox
  # Which lists of the domain will be used?
  #list_key:
  #  - apr-dev

#issue_tracker:
#  jira:
    # Obtained from the project's JIRA URL
#    domain: https://issues.apache.org/jira
#    project_key: CAMEL
    # Download using `download_jira_data.Rmd`
#    issues: ../../rawdata/issue_tracker/camel_issues.json
#    issue_comments: ../../rawdata/issue_tracker/camel_issue_comments.json
#  github:
    # Obtained from the project's GitHub URL
#    owner: apache
#    repo: apr
    # Download using `download_github_comments.Rmd`
#    replies: ../../rawdata/github/apr/

#vulnerabilities:
  # Folder path with nvd cve feeds (e.g. nvdcve-1.1-2018.json)
  # Download at: https://nvd.nist.gov/vuln/data-feeds
  #nvd_feed: rawdata/nvdfeed

# Commit message CVE or Issue Regular Expression (regex)
# See project's commit message for examples to create the regex
# commit_message_id_regex:
#   issue_id: CAMEL-[0-9]+
#   #cve_id: ?

filter:
  keep_filepaths_ending_with:
    - cpp
    - c
    - h
    - java
    - js
    - py
    - cc
  remove_filepaths_containing:
    - test

# Third Party Tools Configuration #
#
# See Kaiaulu's README.md for details on how to setup these tools.
tool:
  # # Depends allow to parse file-file static dependencies.
  # depends:
  #   # accepts one language at a time: cpp, java, ruby, python, pom
  #   # You can obtain this information on OpenHub or the project GiHub page right pane.
  #   code_language: java
  #   # Specify which types of Dependencies to keep - see the Depends tool README.md for details.
  #   keep_dependencies_type:
  #     - Cast
  #     - Call
  #     - Import
  #     - Return
  #     - Set
  #     - Use
  #     - Implement
  #     - ImplLink
  #     - Extend
  #     - Create
  #     - Throw
  #     - Parameter
  #     - Contain
  # dv8:
  #   # The project folder path to store various intermediate
  #   # files for DV8 Analysis
  #   # The folder name will be used in the file names.
  #   folder_path: ../../analysis/dv8/camel_1_0_0
  #   # the architectural flaws thresholds that should be used
  #   architectural_flaws:
  #     cliqueDepends:
  #       - call
  #       - use
  #     crossingCochange: 2
  #     crossingFanIn: 4
  #     crossingFanOut: 4
  #     mvCochange: 2
  #     uiCochange: 2
  #     uihDepends:
  #       - call
  #       - use
  #     uihInheritance:
  #       - extend
  #       - implement
  #       - public
  #       - private
  #       - virtual
  #     uiHistoryImpact: 10
  #     uiStructImpact: 0.01
  # Uctags allows finer file-file dependency parsing (e.g. functions, classes, structs)
  uctags:
    # See https://github.com/sailuh/kaiaulu/wiki/Universal-Ctags for details
    # What types of file-file dependencies should be considered? If all
    # dependencies are specified, Kaiaulu will use all of them if available.
    keep_lines_type:
      c:
        - f # function definition
      cpp:
        - c # classes
        - f # function definition
      java:
        - c # classes
        - m # methods
      python:
        - c # classes
        - f # functions
      r:
        - f # functions

# Analysis Configuration #
analysis:
  # # A list of topic and keywords (see src_text_showcase.Rmd).
  # topics:
  #   topic_1:
  #     - Parser
  #     - Lexer
  #   topic_2:
  #     - Python
  #     - Ruby
  # You can specify the intervals in 2 ways: window, or enumeration
  window:
    # # If using gitlog, use start_commit and end_commit. Timestamp is inferred from gitlog
    # start_commit: 9eae9e96f15e1f216162810cef4271a439a74223
    # end_commit: f8f9ec1f249dd552065aa37c983bed4d4d869bb0
    # # Use datetime only if no gitlog is used in the analysis.
    # start_datetime: 2013-05-01 00:00:00
    # end_datetime: 2013-11-01 00:00:00
    # You can provide a set of dates to create time windows between these
    # dates for evolutionary analyses.
    ranges:
      - 2005-07-13 16:56:05
      - 2005-07-31 01:23:47
      - 2005-10-28 03:48:33
      - 2006-01-24 21:42:38
      - 2006-04-24 01:21:29
      - 2006-07-26 00:15:01
      - 2006-10-23 23:53:24
      - 2007-01-22 06:32:14
      - 2007-04-21 05:43:32
      - 2007-07-21 05:17:20
      - 2007-10-19 06:53:30
      - 2008-01-13 19:07:14
      - 2008-04-15 02:07:49
      - 2008-07-14 04:57:01
      - 2008-10-10 22:13:16
      - 2009-01-11 05:47:06
      - 2009-04-11 07:51:07
      - 2009-07-09 02:00:40
      - 2009-10-01 16:15:27
      - 2010-01-06 08:16:07
      - 2010-04-05 15:57:00
      - 2010-06-30 22:30:37
      - 2010-10-02 13:56:09
      - 2011-01-01 00:37:38
      - 2011-03-31 08:42:51
      - 2011-06-29 15:12:48
      - 2011-09-28 02:26:12
      - 2011-12-27 08:22:55
      - 2012-03-25 19:04:11
      - 2012-06-23 16:47:52
      - 2012-09-22 07:16:22
      - 2012-12-20 20:50:06
      - 2013-03-21 08:27:24
      - 2013-06-19 08:37:24
      - 2013-09-17 08:05:45
      - 2013-12-15 22:02:20
      - 2014-03-15 12:49:03
      - 2014-06-14 00:01:35
      - 2014-09-12 06:48:38
      - 2014-12-09 16:17:05
      - 2015-03-10 23:24:46
      - 2015-06-08 19:19:16
      - 2015-09-06 08:02:47
      - 2015-12-05 22:23:13
      - 2016-03-04 22:33:35
      - 2016-06-03 04:47:30
      - 2016-09-01 00:41:34
      - 2016-11-30 01:00:16
      - 2017-02-27 19:47:11
      - 2017-05-28 00:50:35
      - 2017-08-27 00:57:45
      - 2017-11-24 12:53:40
      - 2018-02-22 16:15:04
      - 2018-05-23 15:02:37
      - 2018-08-21 16:17:46
      - 2018-11-19 20:12:52
      - 2019-02-16 06:56:28
      - 2019-05-18 17:29:00
      - 2019-08-17 07:20:36
      - 2019-11-15 08:01:30
      - 2020-02-13 07:32:20
      - 2020-05-13 08:30:30
      - 2020-08-11 08:31:44
      - 2020-11-09 07:12:00
      - 2021-02-06 12:41:35
      - 2021-05-07 18:03:46
      - 2021-08-05 10:40:34
      - 2021-11-04 07:06:03
      - 2022-02-02 06:54:19
      - 2022-05-03 08:01:45
      - 2022-08-01 07:33:08
      - 2022-10-29 11:34:22
      - 2023-01-27 20:49:54
      - 2023-04-28 04:58:10
      - 2023-07-27 04:56:38
      - 2023-10-25 07:49:33
      - 2024-01-23 08:47:31
#     # Instead of manually providing dates, you can also generate
#     # time windows automatically by specifying a desired window size in
#     # days. Note that explicit ranges will be preferred and used by default
#     # if provided.
#     size_days: 90
# enumeration:
#     # If using gitlog, specify the commits
#     commit:
#       - 9eae9e96f15e1f216162810cef4271a439a74223
#       - f1d2d568776b3708dd6a3077376e2331f9268b04
#       - c33a2ce74c84f0d435bfa2dd8953d132ebf7a77a
#     # Use datetime only if no gitlog is used in the analysis. Timestamp is inferred from gitlog
#     datetime:
#       - 2013-05-01 00:00:00
#       - 2013-08-01 00:00:00
#       - 2013-11-01 00:00:00
